// ==UserScript==
// @name         YouTube Download Buttons (Reliable Version)
// @namespace    http://tampermonkey.net/
// @version      2.2.1
// @description  Adds download buttons that reliably appear on initial load and navigation.
// @match        https://www.youtube.com/*
// @grant        none
// @run-at       document-start
// @homepageURL  https://github.com/serh007/youtube_download_user_script
// ==/UserScript==

(function () {
  "use strict";

  const LOCAL_SERVER = "http://127.0.0.1:5000";
  const PROTOCOL_URI = "start-youtube://";
  const PANEL_ID = "yt-download-panel-script";

  let observer = null;

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–æ–≤—ñ—â–µ–Ω—å (toast)
  function showToast(message, duration = 4000) {
    const toast = document.createElement("div");
    toast.textContent = message;
    Object.assign(toast.style, {
      position: "fixed",
      bottom: "20px",
      right: "20px",
      background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
      color: "white",
      padding: "12px 18px",
      borderRadius: "8px",
      zIndex: "10000",
      fontSize: "14px",
      fontWeight: "500",
      boxShadow: "0 4px 12px rgba(0,0,0,0.3)",
      userSelect: "none",
      maxWidth: "300px",
      opacity: "0",
      transform: "translateY(20px)",
      transition: "opacity 0.3s ease, transform 0.3s ease",
    });
    document.body.appendChild(toast);

    // –ü–ª–∞–≤–Ω–∞ –ø–æ—è–≤–∞
    setTimeout(() => {
      toast.style.opacity = "1";
      toast.style.transform = "translateY(0)";
    }, 10);

    // –ü–ª–∞–≤–Ω–µ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
    setTimeout(() => {
      toast.style.opacity = "0";
      toast.style.transform = "translateY(20px)";
      setTimeout(() => toast.remove(), 300);
    }, duration);
  }

  // –§—É–Ω–∫—Ü—ñ—è, —â–æ —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –¥–æ–¥–∞—î –ø–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏
  function addDownloadPanel(container, videoId) {
    if (document.getElementById(PANEL_ID)) return; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—é

    const panel = document.createElement("div");
    panel.id = PANEL_ID;
    Object.assign(panel.style, {
      display: "flex",
      alignItems: "center",
      gap: "8px",
      marginLeft: "8px",
    });

    const select = document.createElement("select");
    Object.assign(select.style, {
      background: "rgba(255, 255, 255, 0.1)",
      color: "#f1f1f1",
      border: "1px solid rgba(255, 255, 255, 0.1)",
      borderRadius: "18px",
      padding: "8px 12px",
      fontSize: "14px",
      cursor: "pointer",
      outline: "none",
    });

    ["360", "480", "720", "1080", "1440", "2160"].forEach((q) => {
      const option = document.createElement("option");
      option.value = q;
      option.textContent = q + "p";
      if (q === "1080") option.selected = true;
      option.style.background = "#212121";
      option.style.color = "#f1f1f1";
      select.appendChild(option);
    });

    const createButton = (text, title, hoverColor) => {
      const btn = document.createElement("button");
      btn.textContent = text;
      btn.title = title;
      Object.assign(btn.style, {
        background: "rgba(255, 255, 255, 0.1)",
        color: "#f1f1f1",
        border: "none",
        borderRadius: "50%",
        cursor: "pointer",
        fontSize: "18px",
        width: "36px",
        height: "36px",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        transition: "background-color 0.2s ease, color 0.2s ease",
      });

      btn.onmouseenter = () =>
        (btn.style.backgroundColor = "rgba(255, 255, 255, 0.2)");
      btn.onmouseleave = () =>
        (btn.style.backgroundColor = "rgba(255, 255, 255, 0.1)");
      return btn;
    };

    const btnDownload = createButton("‚á©", "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ");
    const btnRunServer = createButton("‚èª", "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä"); // '‚áß' -> '‚èª' (Power symbol)

    btnDownload.onclick = () => {
      const quality = select.value;
      fetch(`${LOCAL_SERVER}/download?v=${videoId}&quality=${quality}`)
        .then((res) =>
          res.ok ? res.json() : Promise.reject("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
        )
        .then((data) => showToast(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${data.quality}p`))
        .catch(() => showToast(`‚ùå –ü–æ–º–∏–ª–∫–∞. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ?`));
    };

    btnRunServer.onclick = () => {
      window.location.href = PROTOCOL_URI;
      showToast("üöÄ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞...");
    };

    panel.appendChild(select);
    panel.appendChild(btnDownload);
    panel.appendChild(btnRunServer);
    container.appendChild(panel);
  }

  // –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î –ª–æ–≥—ñ–∫—É
  function initialize() {
    // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É –ø–∞–Ω–µ–ª—å, —è–∫—â–æ –≤–æ–Ω–∞ —î
    document.getElementById(PANEL_ID)?.remove();

    if (observer) observer.disconnect();

    // –ú–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≤—ñ–¥–µ–æ?
    if (window.location.pathname !== "/watch") {
      return; // –Ø–∫—â–æ –Ω—ñ, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    }

    const videoId = new URLSearchParams(window.location.search).get("v");
    if (!videoId) return;

    const buttonContainer = document.querySelector(
      "#top-level-buttons-computed"
    );
    if (buttonContainer) {
      addDownloadPanel(buttonContainer, videoId);
      return;
    }

    observer = new MutationObserver(() => {
      const buttonContainer = document.querySelector(
        "#top-level-buttons-computed"
      );
      if (buttonContainer) {
        addDownloadPanel(buttonContainer, videoId);
        observer.disconnect();
        observer = null;
      }
    });

    observer.observe(document.body, { childList: true, subtree: true });
  }

  // YouTube –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ–¥—ñ—é 'yt-navigate-finish' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏
  // –¶–µ –Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–± –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –∑–º—ñ–Ω—É –≤—ñ–¥–µ–æ
  document.addEventListener("yt-navigate-finish", initialize);

  // –¢–∞–∫–æ–∂ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–¥—Ä–∞–∑—É, –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä—è–º–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—ñ–¥–µ–æ
  // `yt-navigate-finish` –º–æ–∂–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initialize);
  } else {
    initialize();
  }
})();
